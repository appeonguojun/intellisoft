$PBExportHeader$of_npi_validation.srf
global type of_npi_validation from function_object
end type

forward prototypes
global function integer of_npi_validation (string as_npi, string as_from)
end prototypes

global function integer of_npi_validation (string as_npi, string as_from);//function created maha 06.14.07 to validate npi numbers
//i = of_npi_validation(s,"test")
////choose case i
//	case 1
//		mess = "Valid"
//	case -1
//		mess = "Invalid.  NPI number must be 10 Characters."
//	case -2
//		mess = "Invalid.  NPI number can contain Numerals only."
//	case 1
//		mess = "Invalid.  Not a valid NPI number"
//end choose


integer li_char[]
integer c
string ls_dnum
integer li_dtot
integer li_stot
integer li_res
integer ret
integer i
string ls_npi
string s

ls_npi = as_npi
debugbreak()
if len(as_npi) <> 10 then 	return  -1


//check for all numeric values
for i = 1 to len(ls_npi)
	s = mid(ls_npi,i,1) 
	if  not isnumber(s) then
		return -2
	end if
next
//1234567893

//add 80840 to the npi  note character 15 id the checksum number
ls_npi = "80840" + ls_npi

//store the numbers
for c =  1 to 15
	li_char[c] = integer(mid(ls_npi,c,1))
next

//double the odd numbers
for c = 2 to 14 step 2
	li_char[c] = 2 * li_char[c]
next

//build the doubled number string
for c = 2 to 14 step 2
	ls_dnum = ls_dnum + string(li_char[c]) 
next

//add the numbers together
for c = 1 to len(ls_dnum)
	li_dtot = li_dtot + integer(mid(ls_dnum,c,1))
next

//sum the undoubled numbers
for c = 1 to 13 step 2
	li_stot = li_stot + li_char[c] 
next

//add the two numbers together
li_dtot = li_dtot + li_stot

li_res = (integer(li_dtot / 10) + 1) * 10
li_res = li_res - li_dtot

if li_char[15] <> li_res then return -3



return 1
end function

